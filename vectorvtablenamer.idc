// Westwood Vector classes vtable naming script
//
// by tomsons26
//
// Can be recycled to name other types of vtables i guess..
// Note, may not be accurate to actual symbols that are generated by MSVC,
// but still better than doing it manually.....

#include <idc.idc>

static Get_Name(cls, i)
{
    if (i == 0)
        return "??_E?$%s@%s@UAEPAXI@Z";
    if (i == 1)
        return "??8?$%s@%s@UBE_NABV0@@Z";
    if (i == 2)
        return "?Resize@?$%s@%s@UAE_NHPB%sZ";
    if (i == 3)
        return "?Clear@?$%s@%s@UAEXXZ";
    if (i == 4)
        return "?ID@?$%s@%s@UAEHAB%sZ";
    if (i == 5)
        return "?ID@?$%s@%s@UAEHPB%sZ";

}

static Get_Class(name)
{
    if (strstr(name, "$VectorCursor") != -1)
        return "WRONG";
    if (strstr(name, "$DynamicVectorClass") != -1)
        return "DynamicVectorClass";
    if (strstr(name, "$VectorClass") != -1)
        return "VectorClass";
    if (strstr(name, "$TypeList") != -1)
        return "TypeList";
    
    return "WRONG";
}

static Type_Name(fullname)
{
    auto nstart = strstr(fullname,"@");
    auto nend = strstr(fullname,"@6B@");
    return substr(fullname, nstart + 1, nend);
}

static Set_Names(addr)
{
    auto fullname = Name(addr);
    auto c = Get_Class(fullname);
    auto n = Type_Name(fullname);
    
    
    if (strstr(c, "WRONG") != -1) {
        Message("0x%X is not valid!\n", addr);
        return addr + 4;
    }
    
    //Message("Name is %s\n", n);
    
    auto i = 0;
    while (i < 6) { 
        // skip operator== which DVC doesn't overload
        if(strstr(c, "DynamicVectorClass") != -1 && i == 1) {
        // skip all but sdtor
        } else if(strstr(c, "TypeList") != -1 && i != 0) {
        //
        } else {
            auto mn = Get_Name(c, i);
            //Message(mn);
            
            auto frmt = form(mn, c, n, n);
            MakeName(Dword(addr), frmt);
            //Message(frmt);

        }
        addr = addr + 4;
        i = i + 1;
    }
    return addr;
}

static Batch_Set_Names(start, end)
{
    //good regex reference and test site https://regex101.com/
    auto f = start;
    
    while(1) {
        auto s = FindText(f, SEARCH_DOWN|SEARCH_REGEX, 0, 0, "^((?=.*VectorClass)|(?=.*TypeList))(?=.*vftable).*");
		// IDAs FindText is chaotic.. sometimes it decides to find text in another section of the binary..
		// catch results outside the segment as well as when its done searchning
        if (s <= start|| s >= end || s == BADADDR) {
            //Message("Done, last address %x\n", f);
            break;
        }

        Message("Naming at %x\n", f);
        f = Set_Names(s);
        //f = s + 4;
    }
}

static main()
{
    // name at cursor
    //Set_Names(here);
    
    // batch search and name, start from data section
    // change section name if needed
    auto segm = get_segm_by_sel(SegByName(".rdata"));
    Batch_Set_Names(SegStart(segm), SegEnd(segm));

    // refresh the windows
    Refresh();

}